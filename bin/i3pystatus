#!/usr/bin/env python
from i3pystatus import Status
#from i3pystatus.updates import pacman

status = Status()

# Displays clock like this:
# Tue 30 Jul 11:59:46 PM KW31
#                          ^-- calendar week
status.register("clock",
    format="%a %-d %b %T",)

# Shows the average load of the last minute and the last 5 minutes
# (the default value for format is used)
status.register("load", 
                format="{avg1}")

# Shows your CPU temperature, if you have a Intel CPU
status.register("temp",
    format="{temp:.0f}Â°C",
    file="/sys/class/hwmon/hwmon2/temp1_input")

# The battery monitor has many formatting options, see README for details

# This would look like this, when discharging (or charging)
# â†“14.22W 56.15% [77.81%] 2h:41m
# And like this if full:
# =14.22W 100.0% [91.21%]
#
# This would also display a desktop notification (via D-Bus) if the percentage
# goes below 5 percent while discharging. The block will also color RED.
# If you don't have a desktop notification demon yet, take a look at dunst:
#   http://www.knopwob.org/dunst/
status.register("battery",
    format="{status}:{consumption:.2f}W {percentage:.2f}% {remaining:%E%hh:%Mm}",
    alert=True,
    alert_percentage=5,
    status={
        "DIS": "ðŸ”‹",
        "CHR": "ðŸ”Œ",
        "FULL": "ðŸ”Œ",
    },)

# This would look like this:
# Discharging 6h:51m
#status.register("battery",
#    format="{status} {remaining:%E%hh:%Mm}",
#    alert=True,
#    alert_percentage=5,
#    status={
#        "DIS":  "Discharging",
#        "CHR":  "Charging",
#        "FULL": "Bat full",
#    },)

# Displays whether a DHCP client is running
status.register("runwatch",
    name="DHCP",
    path="/var/run/dhcpcd*.pid",)


status.register("online",
                format_online="ðŸ“¡",
                format_offline="ðŸ“¡",
                color="#00ff00")
# Shows the address and up/down state of eth0. If it is up the address
# is shown in
# green (the default value of color_up) and the CIDR-address is shown
# (i.e. 10.10.10.42/24).
# If it's down just the interface name (eth0) will be displayed in red
# (defaults of format_down and color_down)
#
# Note: the network module requires PyPI package netifaces
#status.register("network",
#    interface="enp0s20u1",
#    format_up="{v4cidr}",)

# Note: requires both netifaces and basiciw (for essid and quality)
status.register("network",
    interface="wlp3s0",
    unknown_up=True,
    format_up="{essid} {v4} {quality:03.0f}%",
    on_leftclick="gksu st wifi-menu",
    end_color="#ffff00")


# Shows disk usage of /
# Format:
# 42/128G [86G]
status.register("disk",
    path="/",
    format="{avail}G",)

#status.register("xkblayout", 
#                layouts=["us", "ru"])

status.register("shell", 
                command="langicon", interval=1)

status.register("backlight",
                format="ðŸ”†:{percentage}",
               on_upscroll="light -A 5",
               on_downscroll="light -U 5",)


# Shows pulseaudio default sink volume
#
# Note: requires libpulseaudio from PyPI
status.register("pulseaudio",
    format="ðŸ”Š:{volume}",
    format_muted="ðŸ”‡:{volume}",)

#status.register("updates",
#                backends=[pacman.Pacman()],
#                format_no_updates="No updates",
#                format_working="Running...")

status.register("timer")

# Shows mpd status
# Format:
# Cloud connectedâ–¶Reroute to Remain
#status.register("mpd",
#    format="{status} {artist}:{title} - {album}",
#    status={
#        "pause": "Paused: ",
#        "play": "Playing: ",
#        "stop": "Stopped",
#    },)

status.run()
